import Grid from '@mui/material/Grid';
import { useMemo, Fragment } from 'react';
import PreviewCardCompressed from './preview_card_compressed';
import PreviewCardCozy from './preview_card_cozy';
import { LAYOUT } from './section_body';
import Typography from '@mui/material/Typography';


/**
 * This component is responsible for rendering a
 * set of given posts in array form. This can 
 * display the passed in posts in multiple ways
 * outlined below. This class is intended to be used 
 * with the SearchBody or SectionBody components. 
 * Thisnrequires JSON objects following the enhanced
 * post format to function properly.
 * 
 * DISPLAY FORMATS
 * This section describes the layout formats. They're all
 * handled in this component.
 * - Standard grid layout. Keyword: "grid". It displays
 *      all posts in a grid layout with even spacing between
 *      and maybe about 3-4 columns. It should all be the same
 *      sized. Images should be placed at the top (if it exists).
 * - compressed. Keyword: "compressed". It displays all
 *      posts in a single column with each post taking up
 *      the width of the screen. An image should be placed on
 *      the left side (if it exists).
 * 
 * OTHER DISPLAY FORMATS TO DO LATER
 * - Pintrest tyle. Keyword: "chaos". It displays all posts
 *      in 2-3 columns with the same width, but different
 *      heights. This is for a more aesthetic feeling.
 * - Duck Hunt. Keyword: "duck-hunt". It randomly shoots
 *      posts up into the air and the user can select them
 *      at random. It will render each post purely by image
 *      with maybe a duck in the background.
 * - Library. Keyword: "library". This renders the posts like
 *      books. Each book has physical properties of being
 *      able to collide with other books and is ordered only
 *      in book format. A book can be taken out and viewed,
 *      then put back on the shelf. 
 * - Data Scientist. Keyword: "data". It renders all posts in grid
 *      but displays gathered data on the posts, the user's
 *      actions, and other funny gimmicks I guess. 
 * - Gamer Mode. Keyword: "gamer". It renders it
 *      in grid format, but it gives achievements to the readers
 *      as they click stuff.
 * 
 * PARAMETER TYPES
 * param {Object} posts - Passes in the posts generated by the search query.
 * param {string} style - a string identifer of what type is selected. The values
 *      must correspond to the ones listed above under DISPLAY FORMATS.
 * 
 * AUTHOR NOTE
 *  I'm not sure what I was thinking when I had searchHashCode passed in. The
 *  posts field should update like normal
 */
export default function PostResults({ pageID, posts, style }) {

    /**
     * This function converts the given posts and style into
     * it's matching grid format.
     * 
     * TODO: Fix the grid format so it actually is a grid format
     * and not yeah.
     * 
     * @returns {JSX[]}
     */
    const postDisplay = useMemo(() => {
        const postResultPageID = pageID + "-postLayout";

        let cards = [];
        switch (style) {
            case LAYOUT.GRID:
                cards = posts.map((jsonData) => {
                    return <PreviewCardCozy pageID={postResultPageID} key={pageID + "-preview-" + jsonData["perma-link"]} data={jsonData} />
                });
                break;
            case LAYOUT.COMPRESSED:
                cards = posts.map((jsonData) => {
                    return <PreviewCardCompressed pageID={postResultPageID} key={pageID + "-preview-" + jsonData["perma-link"]} data={jsonData} />
                });
                break;
            default:
                cards = posts.map((jsonData) => {
                    return <PreviewCardCozy pageID={postResultPageID} key={pageID + "-preview-" + jsonData["perma-link"]} data={jsonData} />
                });
        }

        if (cards.length === 0) {
            return <Grid container spacing={2} sx={{ pr: { xs: 1, sm: 1, md: 2, lg: 4 }, pl: { xs: 1, sm: 1, md: 2, lg: 4 } }}>
                <Grid item>
                    <Typography variant="body1">So Empty...</Typography>
                </Grid>
            </Grid>
        }

        return <Grid container spacing={2} sx={{ pr: { xs: 1, sm: 1, md: 2, lg: 4 }, pl: { xs: 1, sm: 1, md: 2, lg: 4 } }}>
            {cards}
        </Grid>
    }, [posts, style, pageID])

    return <Fragment>
        {postDisplay}
    </Fragment>
}