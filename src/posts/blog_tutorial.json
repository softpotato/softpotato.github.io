{
    "created": "11-26-2022",
    "updated": "12-1-2022",
    "title": "Blog Tutorial ",
    "description": "This is a tutorial for creating this blog from scratch. This tutorial primarily focuses solely on front end webpage development and can be used as an introduction into React and hooks. There are 2 main stages to this tutorial. It starts with a simple markdown rendering webpage, then evolves it into a JSON based content rendering webpage.",
    "type": "tutorial",
    "tags": [
        "blog",
        "react",
        "intro",
        "searchbar",
        "markdown",
        "Unit Testing",
        "Web Worker"
    ],
    "status": "ongoing",
    "programming_languages": [
        "JavaScript"
    ],
    "language": "english",
    "splash_image": "test-image.jpg",
    "splash_image_alt": "Image of a smiley face",
    "perma-link": "b",
    "pages": [
        {
            "type": "h3",
            "content": "Warnings",
            "sections": [
                {
                    "type": "h5",
                    "content": "Mobile Render Warning"
                },
                {
                    "type": "body1",
                    "content": "This webpage doesn't render well on mobile devices. I'm still figuring out how to get images and long titles to resize properly in React. I'd suggest against reading this tutorial on a mobile device if you don't want to worry about weird horizontal shrinking/zooming in."
                },
                {
                    "type": "h5",
                    "content": "Progress Warning"
                },
                {
                    "type": "progress-bar",
                    "value": 22.2
                },
                {
                    "type": "body1",
                    "content": "This webpage is largely incomplete. Only 22% of the pages are complete, but the remaining pages will have singificantly more than the currently completed pages."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Technology Overview",
            "sections": [
                {
                    "type": "body1",
                    "content": "This page contains the list of technologies we'll use in this project. We'll install the following technology in the following pages."
                },
                {
                    "type": "markdown",
                    "content": "- **JavaScript** - a programming language\n- **React.js** - A UI library made by Facebook intended to be used to make webpage UIs. [LINK](https://reactjs.org/)\n- **Material UI.js** - An open source javascript library containing a bunch of web components stylized after Google's Material theory. [LINK](https://mui.com/)\n- **gh-pages.js** - A react library for converting a react webpage for GitHub, cause github can't normally handle react webpages. [LINK](https://www.npmjs.com/package/gh-pages)\n- **Node.js** - A JavaScript runtime environment. [LINK](https://nodejs.org/en/)\n- **Node Package Manager (NPM)** - part of Node.js, but it manages the packages used in the project.\n- **Webpack** - A code bundler or something. Merges all code together. Also installed with Node.js.\n- **Babel.js** - A JavaScript converter to allow more JavaScript functions. Also part of Node.js."
                },
                {
                    "type": "body1",
                    "content": "There are a few other additional side package libraries that we'll use, but they aren't essential for the whole design of the webpage or making sure it works. These are primarily for stylistic choices, though optional. I recommend them all. "
                },
                {
                    "type": "markdown",
                    "content": "- **react-syntax-highlighter** - used for styling code like an IDE\n- **react-markdown** - used for parsing text into markdown\n- **rehype-katex** - styles for Latex\n- **remark-math** - extensions for Latex in Markdown"
                }
            ]
        },
        {
            "type": "h3",
            "content": "Installing Packages",
            "sections": [
                {
                    "type": "body1",
                    "content": "This page covers installing and preparing the environment, packages, and IDE that we'll use. The IDE is optional, but I prefer it since it's free."
                },
                {
                    "type": "h4",
                    "content": "Installing Node.js"
                },
                {
                    "type": "body1",
                    "content": "Self explanatory. Install it or something. IDK. Do Long Term Support (LTS) for stability. Always use LTS unless you love unidentifiable errors that you might not be able to fix."
                },
                {
                    "type": "markdown",
                    "content": "LINK: [https://nodejs.org/en/](https://nodejs.org/en/)"
                },
                {
                    "type": "h4",
                    "content": "Choosing an IDE"
                },
                {
                    "type": "markdown",
                    "content": "There are 2 main IDEs that I'm familiar with that are good for making webpages.\n- Webstorm ([LINK](https://www.jetbrains.com/webstorm/)) - Really good if you got money/an academic university email. Good out of the box installation.\n- Visual Studio Code ([LINK](https://code.visualstudio.com/)) - general good free one, but requires you to install extensions."
                },
                {
                    "type": "body1",
                    "content": "personally, I use VsCode, because I don't have a credit card and I don't have access to my school email anymore. Webstorm + VsCode's installation is self explanatory, so I'll cover some VsCode's extensions I use."
                },
                {
                    "type": "h6",
                    "content": "VsCode Extensions"
                },
                {
                    "type": "markdown",
                    "content": "Since VsCode is a generic IDE, you need to install extensions for it to lint your code. The following list is mostly linters you might want for convenience.\n- ES7 + React/Redux/React-Native snippets (dsznajder.es7-react-js-snippets) - linter\n- Git Graph (mhutchie.git-graph) - Makes commits on GitHub cooler.\n- HTML CSS Support (ecmel.vscode-html-css) - linter.\n- Simple React Snippets (burkeholland.simple-react-snippets) - I'm not sure if I use this...\n- Bookmarks (alefragnani.Bookmarks) - Optional, but great if you have a massive project and you have a tendancy to write disgusting 3000 line code files."
                },
                {
                    "type": "h4",
                    "content": "Preparing Environment"
                },
                {
                    "type": "markdown",
                    "content": "Open up VsCode. We need to verify that Node is installed correctly."
                },
                {
                    "type": "markdown",
                    "content": "Open the terminal in the IDE (or externally) through _Terminal > New Terminal_ and type in `node -v`. If Node installed correctly, then it should spew out some numbers corresponding to the version you installed. Mine says _v18.12.1_."
                },
                {
                    "type": "markdown",
                    "content": "Next, type `npx create-react-app <app name>`, where `<app name>` is the name of the folder you want to call your webpage. We'll be using the create-react-app template. It's a good template for learning the front end or experimenting with React features. This is not so great if you're looking to use a framework to create a full stack webpage."
                },
                {
                    "type": "notice",
                    "severity": "info",
                    "content": "If you're looking to get into full stack development, this tutorial is not the right one for you. This tutorial primarily focuses on front end development in React and conversion to a static webpage.",
                    "sections": [
                        {
                            "type": "markdown",
                            "content": "If you want to learn full stack webpage development, then I suggest learning from this webpage instead. [https://fireship.io/lessons/](https://fireship.io/lessons/)."
                        }
                    ]
                },
                {
                    "type": "markdown",
                    "content": "Once it's installed, you'll want to enter the command `cd <app name>` to enter the folder. You'll need to be in the root directory of the app to run it."
                },
                {
                    "type": "markdown",
                    "content": "Then type `npm start`. The webpage should have a giant spinny React sign and stuff."
                },
                {
                    "type": "body1",
                    "content": "You now have a successfully running webpage! We'll now need to install all the corresponding packages."
                },
                {
                    "type": "h4",
                    "content": "Packages Installation",
                    "sections": [
                        {
                            "type": "markdown",
                            "content": "Enter the following commands into the terminal.\n- `npm install gh-pages --save-dev` to install _gh-pages_\n- `npm install @mui/material @emotion/react @emotion/styled` to install _Material UI_ or _MUI_ for short."
                        },
                        {
                            "type": "body1",
                            "content": "These are the primary 2 packages we'll be using. Now I'm gonna do the opposite of what many tutorials do. Tell you to go to another tutorial to do it first before doing continuing."
                        },
                        {
                            "type": "markdown",
                            "content": "Follow this tutorial to set up _gh-pages_. [https://github.com/gitname/react-gh-pages](https://github.com/gitname/react-gh-pages). The reason I do this is because I can't be bothered to regurgitate the same information this person already created. Also, their tutorial is pretty well rounded. gh-pages in general requires some set up, but once set up you can simply run `npx run deploy` to deploy the webpage."
                        }
                    ]
                },
                {
                    "type": "body1",
                    "content": "Congratulations! You've prepared an environment to start making your blog. Now this is where the fun begins."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Front Page Layout",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers the layout of my webpage. This motivates my design choices from for the front page."
                },
                {
                    "type": "h5",
                    "content": "Examining Other Webpages",
                    "sections": [
                        {
                            "type": "markdown",
                            "content": "The first step to creating a webpage is to figure out our webpage layout. I borrowed the layout of many webpages online, and I'll be following some of the things I like from each of them.\n- [https://mui.com/material-ui/getting-started/templates/blog/](https://mui.com/material-ui/getting-started/templates/blog/)\n- [https://mangadex.org/](https://mangadex.org/)\n- [https://developer.android.com/courses/pathways/android-basics-kotlin-one](https://developer.android.com/courses/pathways/android-basics-kotlin-one)\n- [https://mui.com/material-ui/getting-started/templates/](https://mui.com/material-ui/getting-started/templates/)\n"
                        }
                    ]
                },
                {
                    "type": "h5",
                    "content": "My Webpage Design",
                    "sections": [
                        {
                            "type": "body1",
                            "content": "If you click the first blog template, it's very apparent where I got inspiration for the layout of my home page. I just liked the way it looked, so I just yanked those designs into my webpage. The following is a mock up of what I wanted my webpage to be like."
                        },
                        {
                            "type": "markdown",
                            "content": "_The diagram was made in draw.io or diagrams.net. They have a microsoft [store version](https://www.microsoft.com/store/productId/9MVVSZK43QQW) and a [web version](https://app.diagrams.net/)_"
                        },
                        {
                            "type": "static-image",
                            "content": "Homepage_v1.svg",
                            "caption": "Figure 1: Wireframe frame webpage layout for my homepage. The body should have a right column of personal information, while the left column should be the main post feed.",
                            "alt-text": "A diagram containing the layout of my blog's home page. It has an upper header section, a split body section where the left has the main posts and the right is personal information, and a footer."
                        },
                        {
                            "type": "space",
                            "content": "nothing"
                        },
                        {
                            "type": "static-image",
                            "content": "Post_Page_v1.svg",
                            "caption": "Figure 2: The layout of the post when you click on it. The header and footer should be the same as the home page.",
                            "alt-text": "A diagram displaying the layout of the post when you click on a post from the home page. It has a header, body, and footer, where the body is a solid chunk."
                        },
                        {
                            "type": "markdown",
                            "content": "The **header** component will be reused across both pages. It will consist of a big primary title and a horizontal navigational list. (You can use a drawer to get a vertical navigational list, but it's simpler to make it horizontal for now)"
                        },
                        {
                            "type": "markdown",
                            "content": "The **footer** component will also be resused in both pages. Footers can contain anything, but some common items are as follows.\n- Additional navigational links for users lost in the main page UI\n- a language selector for people set to the wrong language (webpage should normally detect their language)\n- Additional legal copy right information\n- a theme switch in case the person couldn't figure out where to put it above, like me"
                        },
                        {
                            "type": "markdown",
                            "content": "The main difference between **figure 1** and **figure 2** is the main content within. **figure 1** has a more static webpage approach, while **figure 2** has a more dynamic approach, relying on the information to be passed down properly."
                        }
                    ]
                }
            ]
        },
        {
            "type": "h3",
            "content": "Introduction to React",
            "sections": [
                {
                    "type": "markdown",
                    "content": "The official docs is a great place to start. I could probably give you a scuffed explanation to what React is, but the official creators already created a tutorial on the basics. I went through this when I first started, and it's a great place to start. [https://reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)."
                },
                {
                    "type": "body1",
                    "content": "TLDR: React can render HTML code easily in a language called JavaScript XML or (JSX). It comes in the following format. We also call all classes/functions that render stuff \"components\". The following is examples of each type."
                },
                {
                    "type": "h5",
                    "content": "Class Component Example"
                },
                {
                    "type": "code",
                    "sections": [
                        {
                            "type": "JavaScript",
                            "content": "// Example React Class Component\n\nimport {Component} from 'react';\n\nexport default class ExampleClass extends Component{\n    constructor() {\n        super();\n        this.state = {text: \"Hello World\"};\n    }\n    render() {\n        return <h1>{this.state.text}</h1>;\n    }\n}"
                        }
                    ]
                },
                {
                    "type": "h5",
                    "content": "Function Component Example"
                },
                {
                    "type": "code",
                    "sections": [
                        {
                            "type": "JavaScript",
                            "content": "// Example React Functional Component\n\n// Functions don't have state, but we can inject it using a hook\nimport { useState } from 'react';\n\nexport default function ExampleComponent(props) {\n    const [text, setText] = useState(\"Hello World\");\n    return <h1>{text}</h1>;\n}"
                        }
                    ]
                },
                {
                    "type": "h5",
                    "content": "When to Use Class vs Function",
                    "sections": [
                        {
                            "type": "body1",
                            "content": "Both are interchangeable, so the question becomes. Why use one or the other?"
                        },
                        {
                            "type": "markdown",
                            "content": "Visually, the function component requires less lines of code. It also makes state variables much more readable with `varName` instead of `this.state.varName`. However, this doesn't scale well when your component begins to have 10-20 fields. Unless you're very organized, the `useState()` hooks get mixed in with various other things, and it can get be difficult finding the variables when your file begins to scale a few hundred to a thousand lines from all the CSS styles you insert in the components."
                        },
                        {
                            "type": "markdown",
                            "content": "Convenience sake, there is another type of component called a **PureComponent**, which is implicitly specified in function components, but not class components. It's like a **Component**, but it has no state so it's faster. I guess if you want to leverage the speed, then you'll have to import it again and update the extends value, which requires 2 lines more of code. Very minor convenience."
                        },
                        {
                            "type": "body1",
                            "content": "I've heard rumors of function components being faster, but I'm not really sure if this is true. They're probably the same."
                        },
                        {
                            "type": "body1",
                            "content": "Lastly, error boundaries are ONLY usable in class components. Function components can use them, but you have to create a class component with the error boundary and import it into the function component."
                        },
                        {
                            "type": "dropdown",
                            "content": "What is an error boundary",
                            "sections": [
                                {
                                    "type": "body1",
                                    "content": "Error boundaries are ways to handle errors in your code. When React faces an error in any part of your code, you'll notice it crashes the whole page. Error boundaries are ways to minimize the impact of crashes, by using components to act as boundaries and handle the errors when they occur."
                                },
                                {
                                    "type": "markdown",
                                    "content": "[https://reactjs.org/docs/error-boundaries.html](https://reactjs.org/docs/error-boundaries.html)"
                                }
                            ]
                        },
                        {
                            "type": "body1",
                            "content": ""
                        },
                        {
                            "type": "body1",
                            "content": "Personally, I use function components for everything and just upgrade to class components when state becomes very important. Or just don't, and embrace the chaos of function components. IDK."
                        }
                    ]
                }
            ]
        },
        {
            "type": "h3",
            "content": "UNFINISHED DRAFTS",
            "sections": [
                {
                    "type": "body1",
                    "content": "The next few sections are incomplete outlines of how I'll structure things next."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Setting Up Home Page",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers the webpage file structure, importing markdown files, and creating a header, body, and footer for the landing page."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Creating Post Display Page",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers rendering the content and using the markdown extension library to render the content."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Hash Router Linking",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers how we'll route to one page to another."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Adding More Sections Challenge",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section is a challenge to use what you know to add more collections of posts."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Part 2 - Advanced Searching",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section outlines what the next few sections are going to be about."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Search Functionality",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers creating a search class."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Web Worker",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers web workers in webpack."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Unit Testing Search Class",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers using Jest to unit test the search class functionality."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Setting up Search Page",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers setting up the search page and making it reusable for other pages."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Creating Enchanced Post Viewer",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers drawers, appbars, Fabs, paper, and in general laying out content in a webpage."
                }
            ]
        },
        {
            "type": "h3",
            "content": "CSS FlexBox Cleanup",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers tweaking and finalizing layouts and organizing content better."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Part 3 - Animations and Stylizing Components",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers the last part of the tutorial, animations."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Flashing Posts and Slide Transitions",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers sliding and flashing skeleton transitions."
                }
            ]
        },
        {
            "type": "h3",
            "content": "Stylized Components",
            "sections": [
                {
                    "type": "body1",
                    "content": "This section covers stylizing the theme switch and other things."
                }
            ]
        }
    ]
}